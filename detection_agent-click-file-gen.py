#!/usr/bin/python

# This script creates a .click file which can then be run using the click modular router.
# http://read.cs.ucla.edu/click/click
# https://github.com/kohler/click
#
# it requires that you have installed the DetectionAgent module within your click installation
# https://github.com/Wi5/odin-wi5-agent/tree/master/src
#

import sys

if (len(sys.argv) != 6):
    print 'Usage:'
    print ''
    print '%s <ODIN_MASTER_IP> <ODIN_MASTER_PORT> <DETECTION_AGENT_IP> <DEBUG_CLICK> <DEBUG_DETECTION>' %(sys.argv[0])
    print ''
    print 'ODIN_MASTER_IP is the IP of the openflow controller where Odin master is running'
    print 'ODIN_MASTER_PORT should be 2819 by default'
    print 'DETECTION_AGENT_IP is the IP address of the AP where this script is running (the IP used for communicating with the controller)'
    print 'DEBUG_CLICK: "0" no info displayed; "1" only basic info displayed; "2" all the info displayed'
    print 'DEBUG_DETECTION: "00" no info displayed; "01" only basic info displayed; "02" all the info displayed; "11" or "12": demo mode (more separators)'
    print ''
    print 'Example:'
    print '$ python %s 192.168.1.X 2819 192.168.1.Y L MM > detection.click' %(sys.argv[0])
    print ''
    print 'and then run the .click file you have generated'
    print 'click$ ./bin/click detection.click'
    sys.exit(0)

# Read the arguments
ODIN_MASTER_IP = sys.argv[1]
ODIN_MASTER_PORT = sys.argv[2]
DETECTION_AGENT_IP = sys.argv[3]			# IP address of the router interface where Click runs.
DEBUG_CLICK = int(sys.argv[4])
DEBUG_DETECTION = int(sys.argv[5])

# Set the value of some constants
TAP_INTERFACE_NAME = "ap"			# name of the TAP device that Click will create in the 

print '''
// This is the scheme:
//
//            TAP interface 'ap' in the machine that runs Click
//             | 
// from host   | 
//             v 
//           click
//
'''

print '''
// call DetectionAgent::configure to create and configure an Detection agent:
detectionagent::DetectionAgent(DETECTION_AGENT_IP %s,DEBUG_DETECTION %s)
''' % (DETECTION_AGENT_IP, DEBUG_DETECTION)

print '''
// send a ping to odinsocket every 2 seconds
TimedSource(2, "ping\n")->  odinsocket::Socket(UDP, %s, %s, CLIENT true)
''' % (ODIN_MASTER_IP, ODIN_MASTER_PORT)




# FIXME: I do not know if ODIN controller need these sockets (ControlSocket and ChatterSocket)
# to work without problem

# Create ControlSocket and ChatterSocket, which are Click's remote control elements.
#http://piotrjurkiewicz.pl/files/bsc-dissertation.pdf
#
# Controlsocket: Communication with the Click application at user level is provided by a 
#TCP/IP based protocol. The user declares it in a configuration file, just like any 
#other element. However, ControlSocket does not process packets itself, so it is not 
#connected with other elements. 
# ControlSocket opens a socket and starts listening for connections.
#When a connection is opened, the server responds by stating its protocol version
#number. After that client can send commands to the Click router. The "server"
#(that is, the ControlSocket element) speaks a relatively simple line-based protocol.
#Commands sent to the server are single lines of text; they consist of words separated
#by spaces
#
# ChatterSocket opens a chatter socket that allows clients to receive copies 
#of router chatter traffic. The "server" (that is, the ChatterSocket element) 
#simply echoes any messages generated by the router configuration to any 
#existing clients.

print '''
// output 0 of odinagent goes to odinsocket
detectionagent[0] -> odinsocket
// rates :: AvailableRates(DEFAULT 24 36 48 108);	// wifi rates in multiples of 500kbps
control :: ControlSocket("TCP", 6777);
chatter :: ChatterSocket("TCP", 6778);
'''


print '''
//'ap' is a Linux tap device which is instantiated by Click in the machine.
//FromHost reads packets from 'ap'
FromHost(%s, HEADROOM 50)
	-> [0]detectionagent
''' % (TAP_INTERFACE_NAME)
